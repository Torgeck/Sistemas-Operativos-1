 
1)  a) El planificador de procesos de Xinu usa una politica de planificacion por prioridades combinado con round robin. Utiliza varias colas para agregar procesos a medida que se van creando o liberando la cpu. Si varios procesos de la misma prioridad necesitan utilizar cpu, xinu le va a dar el cpu a cada uno por un tiempo determinado (este depende del quantum y el proceso puede liberar el cpu antes de que se acabe el quantum si es que termina). En caso de que las prioridades de los procesos sean diferentes se va a dar cpu solo a aquellos procesos con mayor prioridad primero (hasta que estos se hayan terminado su ejecucion) y despues se le da el cpu a los de una prioridad menor a los procesos anteriores. Esto puede generar starvation con los procesos que tienen menor prioridad, ya que no pasaran al estado de ejecucion mientras hayan procesos de mayor prioridad presentes en la cola.

    c) Este planificador no le daria cpu a cada proceso correctamente si cada uno solicita al SO un servicio que sea bloqueante porque el SO le daria el cpu a otro proceso mientras el proceso que solicito un servicio al SO cambia de estado a suspendido, mientras otro pasa al estado de current o ejecutando. Entonces cambiarian los porcentajes de tiempo y no serian siempre iguales.
    
2)  b) Se ejecutan los dos procesos y ambos compiten por el recurso compartido, al no estar sincronizados los resultados pueden ser 2 que primero se ejecute el proceso produce y aumente la variable n a 2000 y luego el proceso consume muestre la variable ya en 2000.
 El otro caso es que el proceso consume se ponga en estado de ejecucion y muestre a n en 0, para que luego el proceso produce se ejecute ya que consume solicita imprimir por pantalla (que es un servicio bloqueante)
